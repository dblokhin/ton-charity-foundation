// DONT'T USE THIS FILE. USE THE `foundation.fif` INSTEAD
// invoked as `withdraw <filename-base> <foundation-name> <seqno> <amount> <addr>`

// stops the program on invalid params
{
  ."invalid expiration option" cr
  2 halt
} : invalid_expiration

// Parse cmdline
$# 6 < ' invalid_options if
$2 =: filename-base
$3 =: foundation-name
$4 parse-int =: seqnum
$5 $>GR =: amount
$6 parse-smc-addr constant bounce? constant dest-addr constant wc

filename-base +".pk" load-keypair
constant wallet_pk
constant wallet_pubk

foundation-name +".addr" load-address 2constant wallet_addr
."Sends grams from " foundation-name type cr
tab ."Destination address: " $6 type  cr
tab ."Amount: " amount (.GR) ."GR$" type space cr

// CREATE THE MESSAGE:
// msg$_ signature:Signature seqno:uint32 body:ContractBodyRequest
// msg_withdraw$11 amount:Grams address:MsgAddressInt = ContractBodyRequest
<b seqnum 32 u, 3 2 u, amount Gram, b{100} s, wc dest-addr addr, b> constant msg-body
msg-body hashu wallet_pk ed25519_sign_uint constant sig-msg-body
<b sig-msg-body B, msg-body <s s, b> constant external-msg
<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s, external-msg ref, b>
2 boc+>B  cr
"withdraw-query.boc" tuck B>file
."(Saved creating query to file " type .")" cr